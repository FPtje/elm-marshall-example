{ pkgs            ? import <nixpkgs> {},
  fetchgit        ? pkgs.fetchgit
}:
let
  nixpkgs = import (fetchgit {
    url = "https://github.com/FPtje/nixpkgs.git";
    rev = "158b4c8b9c84d43f467ca14c42754a3d2b1f5245";
    sha256 = "0c1gvcxqayvhh34z5d3rl5cv147sj0yin32xrjaga85amz67i44r";
  }) {};

  pkgs1 = nixpkgs.pkgs;

  ghcjsCallPackage = pkgs1.haskell.packages.ghcjsHEAD.callPackage;

  # elm-marshall library, used to do the actual marshalling
  elm-marshall-src = fetchgit {
    url = https://github.com/FPtje/elm-marshall.git;
    rev = "60605e56a47bcc9b31840c10c65ee6cd2b979c4f";
    sha256 = "1yk7dp63j9gcsmf4aqdfnd5i7wj1581rnvpknhpk4hyv8m76g0ys";
  };

  elm-marshall = ghcjsCallPackage elm-marshall-src { };

  # The haskell package that generates the common types
  common = pkgs1.callPackage ./common {};

  # The Elm file generated by common
  common-elm = pkgs1.runCommand "Types.elm" {} ''
    ${common}/bin/common
    cp Types.elm $out
  '';

  # ghcjs compiled common library (the other one is plain ghc)
  common-ghcjs = ghcjsCallPackage ./common { compiler = "ghcjsHEAD"; inherit elm-marshall; };

  elm-side = pkgs1.callPackage ./elm { inherit common-elm; };

  ghcjs-side = ghcjsCallPackage ./ghcjs { inherit common-ghcjs elm-marshall; };

  # # The final derivation
  drv = pkgs1.stdenv.mkDerivation {
    name = "elm-marshall-helloworld";

    phases = [ "buildPhase" ];
    src = ./.;

    # Home is set because of this bug:
    # https://github.com/elm-lang/elm-make/issues/93
    buildPhase = ''
      mkdir $out

      cp ${elm-side}/main.js $out/
      cp -r ${./static}/* $out/
      cp ${ghcjs-side}/bin/elm-marshall.jsexe/all.js $out/ghcjs.js
    '';
  };
in
drv

# if pkgs.lib.inNixShell then drv.env else drv
