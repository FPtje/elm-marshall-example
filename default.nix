{ pkgs            ? import <nixpkgs> {},
  stdenv          ? pkgs.stdenv,
  mkDerivation    ? stdenv.mkDerivation,
  callPackage     ? pkgs.callPackage,
  runCommand      ? pkgs.runCommand,
  fetchgit        ? pkgs.fetchgit
}:
let
  ghcjsCallPackage = pkgs.haskell.packages.ghcjs.callPackage;

  # elm-marshall library, used to do the actual marshalling
  elm-marshall-src = fetchgit {
    url = https://github.com/FPtje/elm-marshall.git;
    rev = "08ca3db09254ceed945f9b9390a883c341cf1c84";
    sha256 = "1qzkwjgvpym2nnsck6flwfw4xkya2lv42i4a3dlm99fc354dz04s";
  };

  elm-marshall = ghcjsCallPackage elm-marshall-src { };

  # The haskell package that generates the common types
  common = callPackage ./common {};

  # The Elm file generated by common
  common-elm = runCommand "Types.elm" {} ''
    ${common}/bin/common
    cp Types.elm $out
  '';

  # ghcjs compiled common library (the other one is plain ghc)
  common-ghcjs = ghcjsCallPackage ./common { compiler = "ghcjs"; inherit elm-marshall; };

  elm-side = callPackage ./elm { inherit common-elm; };

  ghcjs-side = ghcjsCallPackage ./ghcjs { inherit common-ghcjs elm-marshall; };

  # The final derivation
  drv = mkDerivation {
    name = "elm-marshall-helloworld";

    phases = [ "buildPhase" ];
    src = ./.;

    # Home is set because of this bug:
    # https://github.com/elm-lang/elm-make/issues/93
    buildPhase = ''
      mkdir $out

      cp ${elm-side}/main.js $out/
      cp -r ${./static}/* $out/
      cp ${ghcjs-side}/bin/elm-marshall.jsexe/all.js $out/ghcjs.js
    '';
  };
in
drv
# if pkgs.lib.inNixShell then drv.env else drv
